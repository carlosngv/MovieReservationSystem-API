openapi: 3.0.3
info:
  title: Movie Reservation System API
  version: 1.0.0
servers:
  - url: http://localhost:3200/api
tags:
  - name: Auth
    description: User authentication and creation
  - name: Movies
    description: Movies CRUD operations
  - name: Reservations
    description: Reservations CRUD operations
paths:
  /auth:
    post:
      tags:
        - auth
      summary: Login user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserLogin'
        '400':
          description: Missing email or password
        '404':
          description: User does not exists
  /auth/register:
    post:
      tags:
        - auth
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Missing name
        '401':
          description: User already exists


components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        profile_picture:
          type: string
          example: 'https://picture.com'
        isVerified:
          type: boolean
          description: User Status
          example: false
        roles:
          type: integer
          format: int64
          example: 3
      xml:
        name: user
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: userlogin

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
